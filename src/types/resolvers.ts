/* IMP NOTE: This file is auto-generated by npm run gql:codegen, don't change manually */
/* eslint-disable */
import * as t from 'src/types'
import type { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
import type { GraphQLContext } from 'src/types';
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };


export type ResolverTypeWrapper<T> = Promise<T> | T;

export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info?: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info?: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info?: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info?: GraphQLResolveInfo
) => t.Maybe<TTypes> | Promise<t.Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info?: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info?: GraphQLResolveInfo
) => TResult | Promise<TResult>;


/** Mapping of interface types */
export type ResolversInterfaceTypes<_RefType extends Record<string, unknown>> = {
  Node: ( t.Code ) | ( t.Fund ) | ( t.Membership ) | ( t.Portfolio ) | ( t.PortfolioFund ) | ( t.User );
  PagePayload: ( t.FundsPayload ) | ( t.PortfolioFundsPayload );
};

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  BigInt: ResolverTypeWrapper<t.Scalars['BigInt']['output']>;
  Boolean: ResolverTypeWrapper<t.Scalars['Boolean']['output']>;
  Code: ResolverTypeWrapper<t.Code>;
  CreateFundInput: t.CreateFundInput;
  CreatePortfolioFundInput: t.CreatePortfolioFundInput;
  CreatePortfolioInput: t.CreatePortfolioInput;
  Date: ResolverTypeWrapper<t.Scalars['Date']['output']>;
  DateTime: ResolverTypeWrapper<t.Scalars['DateTime']['output']>;
  DeleteFundInput: t.DeleteFundInput;
  DeletePortfolioFundInput: t.DeletePortfolioFundInput;
  DeletePortfolioInput: t.DeletePortfolioInput;
  EmailAddress: ResolverTypeWrapper<t.Scalars['EmailAddress']['output']>;
  ErrorCode: t.ErrorCode;
  Float: ResolverTypeWrapper<t.Scalars['Float']['output']>;
  ForgotPasswordInput: t.ForgotPasswordInput;
  Fund: ResolverTypeWrapper<t.Fund>;
  FundCategory: t.FundCategory;
  FundPlan: t.FundPlan;
  FundType: t.FundType;
  FundsInput: t.FundsInput;
  FundsPayload: ResolverTypeWrapper<t.FundsPayload>;
  ID: ResolverTypeWrapper<t.Scalars['ID']['output']>;
  Int: ResolverTypeWrapper<t.Scalars['Int']['output']>;
  JWT: ResolverTypeWrapper<t.Scalars['JWT']['output']>;
  Membership: ResolverTypeWrapper<t.Membership>;
  Mutation: ResolverTypeWrapper<undefined>;
  Node: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['Node']>;
  NonEmptyString: ResolverTypeWrapper<t.Scalars['NonEmptyString']['output']>;
  PageInfo: ResolverTypeWrapper<t.PageInfo>;
  PageInput: t.PageInput;
  PagePayload: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['PagePayload']>;
  PhoneNumber: ResolverTypeWrapper<t.Scalars['PhoneNumber']['output']>;
  Portfolio: ResolverTypeWrapper<t.Portfolio>;
  PortfolioFund: ResolverTypeWrapper<t.PortfolioFund>;
  PortfolioFundsInput: t.PortfolioFundsInput;
  PortfolioFundsPayload: ResolverTypeWrapper<t.PortfolioFundsPayload>;
  Query: ResolverTypeWrapper<undefined>;
  ResendCodeInput: t.ResendCodeInput;
  ResetPasswordInput: t.ResetPasswordInput;
  SignInInput: t.SignInInput;
  SignUpInput: t.SignUpInput;
  String: ResolverTypeWrapper<t.Scalars['String']['output']>;
  SuccessPayload: ResolverTypeWrapper<t.SuccessPayload>;
  URL: ResolverTypeWrapper<t.Scalars['URL']['output']>;
  UpdateFundInput: t.UpdateFundInput;
  UpdatePortfolioFundInput: t.UpdatePortfolioFundInput;
  UpdatePortfolioInput: t.UpdatePortfolioInput;
  User: ResolverTypeWrapper<t.User>;
  UserRole: t.UserRole;
  UserStatus: t.UserStatus;
  VerifyCodeInput: t.VerifyCodeInput;
  Void: ResolverTypeWrapper<t.Scalars['Void']['output']>;
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  BigInt: t.Scalars['BigInt']['output'];
  Boolean: t.Scalars['Boolean']['output'];
  Code: t.Code;
  CreateFundInput: t.CreateFundInput;
  CreatePortfolioFundInput: t.CreatePortfolioFundInput;
  CreatePortfolioInput: t.CreatePortfolioInput;
  Date: t.Scalars['Date']['output'];
  DateTime: t.Scalars['DateTime']['output'];
  DeleteFundInput: t.DeleteFundInput;
  DeletePortfolioFundInput: t.DeletePortfolioFundInput;
  DeletePortfolioInput: t.DeletePortfolioInput;
  EmailAddress: t.Scalars['EmailAddress']['output'];
  Float: t.Scalars['Float']['output'];
  ForgotPasswordInput: t.ForgotPasswordInput;
  Fund: t.Fund;
  FundsInput: t.FundsInput;
  FundsPayload: t.FundsPayload;
  ID: t.Scalars['ID']['output'];
  Int: t.Scalars['Int']['output'];
  JWT: t.Scalars['JWT']['output'];
  Membership: t.Membership;
  Mutation: undefined;
  Node: ResolversInterfaceTypes<ResolversParentTypes>['Node'];
  NonEmptyString: t.Scalars['NonEmptyString']['output'];
  PageInfo: t.PageInfo;
  PageInput: t.PageInput;
  PagePayload: ResolversInterfaceTypes<ResolversParentTypes>['PagePayload'];
  PhoneNumber: t.Scalars['PhoneNumber']['output'];
  Portfolio: t.Portfolio;
  PortfolioFund: t.PortfolioFund;
  PortfolioFundsInput: t.PortfolioFundsInput;
  PortfolioFundsPayload: t.PortfolioFundsPayload;
  Query: undefined;
  ResendCodeInput: t.ResendCodeInput;
  ResetPasswordInput: t.ResetPasswordInput;
  SignInInput: t.SignInInput;
  SignUpInput: t.SignUpInput;
  String: t.Scalars['String']['output'];
  SuccessPayload: t.SuccessPayload;
  URL: t.Scalars['URL']['output'];
  UpdateFundInput: t.UpdateFundInput;
  UpdatePortfolioFundInput: t.UpdatePortfolioFundInput;
  UpdatePortfolioInput: t.UpdatePortfolioInput;
  User: t.User;
  VerifyCodeInput: t.VerifyCodeInput;
  Void: t.Scalars['Void']['output'];
};

export interface BigIntScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['BigInt'], any> {
  name: 'BigInt';
}

export type CodeResolvers<ContextType = GraphQLContext, ParentType extends ResolversParentTypes['Code'] = ResolversParentTypes['Code']> = {
  code?: Resolver<ResolversTypes['NonEmptyString'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  expireAt?: Resolver<t.Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  user?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface DateScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Date'], any> {
  name: 'Date';
}

export interface DateTimeScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['DateTime'], any> {
  name: 'DateTime';
}

export interface EmailAddressScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['EmailAddress'], any> {
  name: 'EmailAddress';
}

export type FundResolvers<ContextType = GraphQLContext, ParentType extends ResolversParentTypes['Fund'] = ResolversParentTypes['Fund']> = {
  category?: Resolver<t.Maybe<ResolversTypes['FundCategory']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  description?: Resolver<t.Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  lastNav?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  plan?: Resolver<t.Maybe<ResolversTypes['FundPlan']>, ParentType, ContextType>;
  symbol1?: Resolver<t.Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  symbol2?: Resolver<t.Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<t.Maybe<ResolversTypes['FundType']>, ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FundsPayloadResolvers<ContextType = GraphQLContext, ParentType extends ResolversParentTypes['FundsPayload'] = ResolversParentTypes['FundsPayload']> = {
  nodes?: Resolver<ReadonlyArray<ResolversTypes['Fund']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface JwtScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['JWT'], any> {
  name: 'JWT';
}

export type MembershipResolvers<ContextType = GraphQLContext, ParentType extends ResolversParentTypes['Membership'] = ResolversParentTypes['Membership']> = {
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  portfolio?: Resolver<ResolversTypes['Portfolio'], ParentType, ContextType>;
  role?: Resolver<ResolversTypes['UserRole'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  user?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MutationResolvers<ContextType = GraphQLContext, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = {
  createFund?: Resolver<ResolversTypes['Fund'], ParentType, ContextType, RequireFields<t.MutationCreateFundArgs, 'input'>>;
  createPortfolio?: Resolver<ResolversTypes['Portfolio'], ParentType, ContextType, RequireFields<t.MutationCreatePortfolioArgs, 'input'>>;
  createPortfolioFund?: Resolver<ResolversTypes['PortfolioFund'], ParentType, ContextType, RequireFields<t.MutationCreatePortfolioFundArgs, 'input'>>;
  deleteFund?: Resolver<ResolversTypes['SuccessPayload'], ParentType, ContextType, RequireFields<t.MutationDeleteFundArgs, 'input'>>;
  deletePortfolio?: Resolver<ResolversTypes['SuccessPayload'], ParentType, ContextType, RequireFields<t.MutationDeletePortfolioArgs, 'input'>>;
  deletePortfolioFund?: Resolver<ResolversTypes['SuccessPayload'], ParentType, ContextType, RequireFields<t.MutationDeletePortfolioFundArgs, 'input'>>;
  forgotPassword?: Resolver<ResolversTypes['SuccessPayload'], ParentType, ContextType, RequireFields<t.MutationForgotPasswordArgs, 'input'>>;
  resendCode?: Resolver<ResolversTypes['SuccessPayload'], ParentType, ContextType, RequireFields<t.MutationResendCodeArgs, 'input'>>;
  resetPassword?: Resolver<ResolversTypes['SuccessPayload'], ParentType, ContextType, RequireFields<t.MutationResetPasswordArgs, 'input'>>;
  signIn?: Resolver<ResolversTypes['User'], ParentType, ContextType, RequireFields<t.MutationSignInArgs, 'input'>>;
  signUp?: Resolver<ResolversTypes['User'], ParentType, ContextType, RequireFields<t.MutationSignUpArgs, 'input'>>;
  updateFund?: Resolver<ResolversTypes['Fund'], ParentType, ContextType, RequireFields<t.MutationUpdateFundArgs, 'input'>>;
  updatePortfolio?: Resolver<ResolversTypes['Portfolio'], ParentType, ContextType, RequireFields<t.MutationUpdatePortfolioArgs, 'input'>>;
  updatePortfolioFund?: Resolver<ResolversTypes['PortfolioFund'], ParentType, ContextType, RequireFields<t.MutationUpdatePortfolioFundArgs, 'input'>>;
  verifyCode?: Resolver<ResolversTypes['SuccessPayload'], ParentType, ContextType, RequireFields<t.MutationVerifyCodeArgs, 'input'>>;
};

export type NodeResolvers<ContextType = GraphQLContext, ParentType extends ResolversParentTypes['Node'] = ResolversParentTypes['Node']> = {
  __resolveType: TypeResolveFn<'Code' | 'Fund' | 'Membership' | 'Portfolio' | 'PortfolioFund' | 'User', ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
};

export interface NonEmptyStringScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['NonEmptyString'], any> {
  name: 'NonEmptyString';
}

export type PageInfoResolvers<ContextType = GraphQLContext, ParentType extends ResolversParentTypes['PageInfo'] = ResolversParentTypes['PageInfo']> = {
  endCursor?: Resolver<t.Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  hasNextPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  hasPreviousPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  startCursor?: Resolver<t.Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PagePayloadResolvers<ContextType = GraphQLContext, ParentType extends ResolversParentTypes['PagePayload'] = ResolversParentTypes['PagePayload']> = {
  __resolveType: TypeResolveFn<'FundsPayload' | 'PortfolioFundsPayload', ParentType, ContextType>;
  nodes?: Resolver<ReadonlyArray<ResolversTypes['Node']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
};

export interface PhoneNumberScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['PhoneNumber'], any> {
  name: 'PhoneNumber';
}

export type PortfolioResolvers<ContextType = GraphQLContext, ParentType extends ResolversParentTypes['Portfolio'] = ResolversParentTypes['Portfolio']> = {
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  description?: Resolver<t.Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  funds?: Resolver<ReadonlyArray<ResolversTypes['PortfolioFund']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  members?: Resolver<ReadonlyArray<ResolversTypes['Membership']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PortfolioFundResolvers<ContextType = GraphQLContext, ParentType extends ResolversParentTypes['PortfolioFund'] = ResolversParentTypes['PortfolioFund']> = {
  cost?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  fund?: Resolver<ResolversTypes['Fund'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  portfolio?: Resolver<ResolversTypes['Portfolio'], ParentType, ContextType>;
  units?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PortfolioFundsPayloadResolvers<ContextType = GraphQLContext, ParentType extends ResolversParentTypes['PortfolioFundsPayload'] = ResolversParentTypes['PortfolioFundsPayload']> = {
  nodes?: Resolver<ReadonlyArray<ResolversTypes['PortfolioFund']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type QueryResolvers<ContextType = GraphQLContext, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
  fund?: Resolver<ResolversTypes['Fund'], ParentType, ContextType, RequireFields<t.QueryFundArgs, 'fundId'>>;
  funds?: Resolver<ResolversTypes['FundsPayload'], ParentType, ContextType, Partial<t.QueryFundsArgs>>;
  me?: Resolver<t.Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  portfolio?: Resolver<ResolversTypes['Portfolio'], ParentType, ContextType, RequireFields<t.QueryPortfolioArgs, 'portfolioId'>>;
  portfolioFund?: Resolver<ResolversTypes['PortfolioFund'], ParentType, ContextType, RequireFields<t.QueryPortfolioFundArgs, 'portfolioFundId'>>;
  portfolioFunds?: Resolver<ResolversTypes['PortfolioFundsPayload'], ParentType, ContextType, RequireFields<t.QueryPortfolioFundsArgs, 'input'>>;
};

export type SuccessPayloadResolvers<ContextType = GraphQLContext, ParentType extends ResolversParentTypes['SuccessPayload'] = ResolversParentTypes['SuccessPayload']> = {
  error?: Resolver<t.Maybe<ResolversTypes['ErrorCode']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface UrlScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['URL'], any> {
  name: 'URL';
}

export type UserResolvers<ContextType = GraphQLContext, ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']> = {
  codes?: Resolver<ReadonlyArray<ResolversTypes['Code']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  firstName?: Resolver<ResolversTypes['NonEmptyString'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isBlocked?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  isVerified?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  lastName?: Resolver<t.Maybe<ResolversTypes['NonEmptyString']>, ParentType, ContextType>;
  memberships?: Resolver<ReadonlyArray<ResolversTypes['Membership']>, ParentType, ContextType>;
  mobile?: Resolver<ResolversTypes['PhoneNumber'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['NonEmptyString'], ParentType, ContextType>;
  password?: Resolver<ResolversTypes['NonEmptyString'], ParentType, ContextType>;
  salt?: Resolver<ResolversTypes['NonEmptyString'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['UserStatus'], ParentType, ContextType>;
  token?: Resolver<ResolversTypes['JWT'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface VoidScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Void'], any> {
  name: 'Void';
}

export type Resolvers<ContextType = GraphQLContext> = {
  BigInt?: GraphQLScalarType;
  Code?: CodeResolvers<ContextType>;
  Date?: GraphQLScalarType;
  DateTime?: GraphQLScalarType;
  EmailAddress?: GraphQLScalarType;
  Fund?: FundResolvers<ContextType>;
  FundsPayload?: FundsPayloadResolvers<ContextType>;
  JWT?: GraphQLScalarType;
  Membership?: MembershipResolvers<ContextType>;
  Mutation?: MutationResolvers<ContextType>;
  Node?: NodeResolvers<ContextType>;
  NonEmptyString?: GraphQLScalarType;
  PageInfo?: PageInfoResolvers<ContextType>;
  PagePayload?: PagePayloadResolvers<ContextType>;
  PhoneNumber?: GraphQLScalarType;
  Portfolio?: PortfolioResolvers<ContextType>;
  PortfolioFund?: PortfolioFundResolvers<ContextType>;
  PortfolioFundsPayload?: PortfolioFundsPayloadResolvers<ContextType>;
  Query?: QueryResolvers<ContextType>;
  SuccessPayload?: SuccessPayloadResolvers<ContextType>;
  URL?: GraphQLScalarType;
  User?: UserResolvers<ContextType>;
  Void?: GraphQLScalarType;
};

